' Generated by the protocol buffer compiler.  DO NOT EDIT!
' source: google/protobuf/struct.proto
#Region "Designer generated code"

Imports pbc = Google.Protobuf.Collections
Imports pbr = Google.Protobuf.Reflection

Namespace Google.Protobuf.WellKnownTypes

    ''' <summary>Holder for reflection information generated from google/protobuf/struct.proto</summary>
    Public Partial Module StructReflection

#Region "Descriptor"
        ''' <summary>File descriptor for google/protobuf/struct.proto</summary>
        Public ReadOnly Property Descriptor As pbr.FileDescriptor
            Get
                Return descriptorField
            End Get
        End Property

        Private descriptorField As pbr.FileDescriptor

        Sub New()
            Dim descriptorData As Byte() = Global.System.Convert.FromBase64String(String.Concat("Chxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvEg9nb29nbGUucHJvdG9i", "dWYihAEKBlN0cnVjdBIzCgZmaWVsZHMYASADKAsyIy5nb29nbGUucHJvdG9i", "dWYuU3RydWN0LkZpZWxkc0VudHJ5GkUKC0ZpZWxkc0VudHJ5EgsKA2tleRgB", "IAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZToC", "OAEi6gEKBVZhbHVlEjAKCm51bGxfdmFsdWUYASABKA4yGi5nb29nbGUucHJv", "dG9idWYuTnVsbFZhbHVlSAASFgoMbnVtYmVyX3ZhbHVlGAIgASgBSAASFgoM", "c3RyaW5nX3ZhbHVlGAMgASgJSAASFAoKYm9vbF92YWx1ZRgEIAEoCEgAEi8K", "DHN0cnVjdF92YWx1ZRgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RI", "ABIwCgpsaXN0X3ZhbHVlGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLkxpc3RW", "YWx1ZUgAQgYKBGtpbmQiMwoJTGlzdFZhbHVlEiYKBnZhbHVlcxgBIAMoCzIW", "Lmdvb2dsZS5wcm90b2J1Zi5WYWx1ZSobCglOdWxsVmFsdWUSDgoKTlVMTF9W", "QUxVRRAAQoEBChNjb20uZ29vZ2xlLnByb3RvYnVmQgtTdHJ1Y3RQcm90b1AB", "WjFnaXRodWIuY29tL2dvbGFuZy9wcm90b2J1Zi9wdHlwZXMvc3RydWN0O3N0", "cnVjdHBioAEBogIDR1BCqgIeR29vZ2xlLlByb3RvYnVmLldlbGxLbm93blR5", "cGVzYgZwcm90bzM="))
            descriptorField = pbr.FileDescriptor.FromGeneratedCode(descriptorData, New pbr.FileDescriptor() {}, New pbr.GeneratedClrTypeInfo({GetType(Global.Google.Protobuf.WellKnownTypes.NullValue)}, New pbr.GeneratedClrTypeInfo() {New pbr.GeneratedClrTypeInfo(GetType(Global.Google.Protobuf.WellKnownTypes.Struct), Global.Google.Protobuf.WellKnownTypes.Struct.Parser, {"Fields"}, Nothing, Nothing, New pbr.GeneratedClrTypeInfo() {Nothing}), New pbr.GeneratedClrTypeInfo(GetType(Global.Google.Protobuf.WellKnownTypes.Value), Global.Google.Protobuf.WellKnownTypes.Value.Parser, {"NullValue", "NumberValue", "StringValue", "BoolValue", "StructValue", "ListValue"}, {"Kind"}, Nothing, Nothing), New pbr.GeneratedClrTypeInfo(GetType(Global.Google.Protobuf.WellKnownTypes.ListValue), Global.Google.Protobuf.WellKnownTypes.ListValue.Parser, {"Values"}, Nothing, Nothing, Nothing)}))
        End Sub
#End Region

    End Module
#Region "Enums"
    ''' <summary>
    '''  `NullValue` is a singleton enumeration to represent the null value for the
    '''  `Value` type union.
    '''
    '''   The JSON representation for `NullValue` is JSON `null`.
    ''' </summary>
    Public Enum NullValue
        ''' <summary>
        '''  Null value.
        ''' </summary>
        <pbr.OriginalName("NULL_VALUE")>
        NullValue = 0
    End Enum

#End Region

#Region "Messages"
    ''' <summary>
    '''  `Struct` represents a structured data value, consisting of fields
    '''  which map to dynamically typed values. In some languages, `Struct`
    '''  might be supported by a native representation. For example, in
    '''  scripting languages like JS a struct is represented as an
    '''  object. The details of that representation are described together
    '''  with the proto support for the language.
    '''
    '''  The JSON representation for `Struct` is JSON object.
    ''' </summary>
    Public NotInheritable Partial Class Struct
        Implements IMessageType(Of Struct)

        Private Shared ReadOnly _parser As MessageParserType(Of Struct) = New MessageParserType(Of Struct)(Function() New Struct())

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Shared ReadOnly Property Parser As MessageParserType(Of Struct)
            Get
                Return _parser
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Shared ReadOnly Property DescriptorProp As pbr.MessageDescriptor
            Get
                Return Global.Google.Protobuf.WellKnownTypes.StructReflection.Descriptor.MessageTypes(0)
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Private ReadOnly Property Descriptor As pbr.MessageDescriptor Implements IMessage.Descriptor
            Get
                Return DescriptorProp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub New()
            OnConstruction()
        End Sub

        Partial Private Sub OnConstruction()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub New(other As Struct)
            Me.New()
            fields_ = other.fields_.Clone()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Function Clone() As Struct Implements IDeepCloneable(Of Struct).Clone
            Return New Struct(Me)
        End Function

        ''' <summary>Field number for the "fields" field.</summary>
        Public Const FieldsFieldNumber As Integer = 1
        Private Shared ReadOnly _map_fields_codec As pbc.MapField(Of String, Global.Google.Protobuf.WellKnownTypes.Value).Codec = New pbc.MapField(Of String, Global.Google.Protobuf.WellKnownTypes.Value).Codec(ForString(10), FieldCodec.ForMessage(18, Global.Google.Protobuf.WellKnownTypes.Value.Parser), 10)
        Private ReadOnly fields_ As pbc.MapField(Of String, Global.Google.Protobuf.WellKnownTypes.Value) = New pbc.MapField(Of String, Global.Google.Protobuf.WellKnownTypes.Value)()
        ''' <summary>
        '''  Unordered map of dynamically typed values.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public ReadOnly Property Fields As pbc.MapField(Of String, Global.Google.Protobuf.WellKnownTypes.Value)
            Get
                Return fields_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function Equals(other As Object) As Boolean
            Return Equals(TryCast(other, Struct))
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overloads Function Equals(other As Struct) As Boolean Implements IEquatable(Of Struct).Equals
            If ReferenceEquals(other, Nothing) Then
                Return False
            End If

            If ReferenceEquals(other, Me) Then
                Return True
            End If

            If Not Fields.Equals(other.Fields) Then Return False
            Return True
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function GetHashCode() As Integer
            Dim hash = 1
            hash = hash Xor Fields.GetHashCode()
            Return hash
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function ToString() As String
            Return JsonFormatter.ToDiagnosticString(Me)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub WriteTo(output As CodedOutputStream) Implements IMessage.WriteTo
            fields_.WriteTo(output, _map_fields_codec)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Function CalculateSize() As Integer Implements IMessage.CalculateSize
            Dim size = 0
            size += fields_.CalculateSize(_map_fields_codec)
            Return size
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub MergeFrom(other As Struct) Implements IMessageType(Of Struct).MergeFrom
            If other Is Nothing Then
                Return
            End If

            fields_.Add(other.fields_)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub MergeFrom(input As CodedInputStream) Implements IMessage.MergeFrom
            Dim tag As UInteger

            While (CSharpImpl.__Assign(tag, input.ReadTag())) <> 0

                Select Case tag
                    Case 10
                        fields_.AddEntriesFrom(input, _map_fields_codec)
                        Exit Select
                    Case Else
                        input.SkipLastField()
                End Select
            End While
        End Sub

        Private Class CSharpImpl
            <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
            Shared Function __Assign(Of T)(ByRef target As T, value As T) As T
                target = value
                Return value
            End Function
        End Class
    End Class

    ''' <summary>
    '''  `Value` represents a dynamically typed value which can be either
    '''  null, a number, a string, a boolean, a recursive struct value, or a
    '''  list of values. A producer of value is expected to set one of that
    '''  variants, absence of any variant indicates an error.
    '''
    '''  The JSON representation for `Value` is JSON value.
    ''' </summary>
    Public NotInheritable Partial Class Value
        Implements IMessageType(Of Value)

        Private Shared ReadOnly _parser As MessageParserType(Of Value) = New MessageParserType(Of Value)(Function() New Value())

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Shared ReadOnly Property Parser As MessageParserType(Of Value)
            Get
                Return _parser
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Shared ReadOnly Property DescriptorProp As pbr.MessageDescriptor
            Get
                Return Global.Google.Protobuf.WellKnownTypes.StructReflection.Descriptor.MessageTypes(1)
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Private ReadOnly Property Descriptor As pbr.MessageDescriptor Implements IMessage.Descriptor
            Get
                Return DescriptorProp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub New()
            OnConstruction()
        End Sub

        Partial Private Sub OnConstruction()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub New(other As Value)
            Me.New()

            Select Case other.KindCase
                Case KindOneofCase.NullValue
                    NullValue = other.NullValue
                Case KindOneofCase.NumberValue
                    NumberValue = other.NumberValue
                Case KindOneofCase.StringValue
                    StringValue = other.StringValue
                Case KindOneofCase.BoolValue
                    BoolValue = other.BoolValue
                Case KindOneofCase.StructValue
                    StructValue = other.StructValue.Clone()
                Case KindOneofCase.ListValue
                    ListValue = other.ListValue.Clone()
            End Select
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Function Clone() As Value Implements IDeepCloneable(Of Value).Clone
            Return New Value(Me)
        End Function

        ''' <summary>Field number for the "null_value" field.</summary>
        Public Const NullValueFieldNumber As Integer = 1
        ''' <summary>
        '''  Represents a null value.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Property NullValue As Global.Google.Protobuf.WellKnownTypes.NullValue
            Get
                Return If(kindCase_ = KindOneofCase.NullValue, CType(kind_, Global.Google.Protobuf.WellKnownTypes.NullValue), 0)
            End Get
            Set(value As Global.Google.Protobuf.WellKnownTypes.NullValue)
                kind_ = value
                kindCase_ = KindOneofCase.NullValue
            End Set
        End Property

        ''' <summary>Field number for the "number_value" field.</summary>
        Public Const NumberValueFieldNumber As Integer = 2
        ''' <summary>
        '''  Represents a double value.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Property NumberValue As Double
            Get
                Return If(kindCase_ = KindOneofCase.NumberValue, CDbl(kind_), 0R)
            End Get
            Set(value As Double)
                kind_ = value
                kindCase_ = KindOneofCase.NumberValue
            End Set
        End Property

        ''' <summary>Field number for the "string_value" field.</summary>
        Public Const StringValueFieldNumber As Integer = 3
        ''' <summary>
        '''  Represents a string value.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Property StringValue As String
            Get
                Return If(kindCase_ = KindOneofCase.StringValue, CStr(kind_), "")
            End Get
            Set(value As String)
                kind_ = CheckNotNull(value, "value")
                kindCase_ = KindOneofCase.StringValue
            End Set
        End Property

        ''' <summary>Field number for the "bool_value" field.</summary>
        Public Const BoolValueFieldNumber As Integer = 4
        ''' <summary>
        '''  Represents a boolean value.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Property BoolValue As Boolean
            Get
                Return If(kindCase_ = KindOneofCase.BoolValue, CBool(kind_), False)
            End Get
            Set(value As Boolean)
                kind_ = value
                kindCase_ = KindOneofCase.BoolValue
            End Set
        End Property

        ''' <summary>Field number for the "struct_value" field.</summary>
        Public Const StructValueFieldNumber As Integer = 5
        ''' <summary>
        '''  Represents a structured value.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Property StructValue As Global.Google.Protobuf.WellKnownTypes.Struct
            Get
                Return If(kindCase_ = KindOneofCase.StructValue, CType(kind_, Global.Google.Protobuf.WellKnownTypes.Struct), Nothing)
            End Get
            Set(value As Global.Google.Protobuf.WellKnownTypes.Struct)
                kind_ = value
                kindCase_ = If(value Is Nothing, KindOneofCase.None, KindOneofCase.StructValue)
            End Set
        End Property

        ''' <summary>Field number for the "list_value" field.</summary>
        Public Const ListValueFieldNumber As Integer = 6
        ''' <summary>
        '''  Represents a repeated `Value`.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Property ListValue As Global.Google.Protobuf.WellKnownTypes.ListValue
            Get
                Return If(kindCase_ = KindOneofCase.ListValue, CType(kind_, Global.Google.Protobuf.WellKnownTypes.ListValue), Nothing)
            End Get
            Set(value As Global.Google.Protobuf.WellKnownTypes.ListValue)
                kind_ = value
                kindCase_ = If(value Is Nothing, KindOneofCase.None, KindOneofCase.ListValue)
            End Set
        End Property

        Private kind_ As Object
        ''' <summary>Enum of possible cases for the "kind" oneof.</summary>
        Public Enum KindOneofCase
            None = 0
            NullValue = 1
            NumberValue = 2
            StringValue = 3
            BoolValue = 4
            StructValue = 5
            ListValue = 6
        End Enum

        Private kindCase_ As KindOneofCase = KindOneofCase.None

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public ReadOnly Property KindCase As KindOneofCase
            Get
                Return kindCase_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub ClearKind()
            kindCase_ = KindOneofCase.None
            kind_ = Nothing
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function Equals(other As Object) As Boolean
            Return Equals(TryCast(other, Value))
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overloads Function Equals(other As Value) As Boolean Implements IEquatable(Of Value).Equals
            If ReferenceEquals(other, Nothing) Then
                Return False
            End If

            If ReferenceEquals(other, Me) Then
                Return True
            End If

            If NullValue <> other.NullValue Then Return False
            If NumberValue <> other.NumberValue Then Return False
            If Not Equals(StringValue, other.StringValue) Then Return False
            If BoolValue <> other.BoolValue Then Return False
            If Not Object.Equals(StructValue, other.StructValue) Then Return False
            If Not Object.Equals(ListValue, other.ListValue) Then Return False
            If KindCase <> other.KindCase Then Return False
            Return True
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function GetHashCode() As Integer
            Dim hash = 1
            If kindCase_ = KindOneofCase.NullValue Then hash = hash Xor NullValue.GetHashCode()
            If kindCase_ = KindOneofCase.NumberValue Then hash = hash Xor NumberValue.GetHashCode()
            If kindCase_ = KindOneofCase.StringValue Then hash = hash Xor StringValue.GetHashCode()
            If kindCase_ = KindOneofCase.BoolValue Then hash = hash Xor BoolValue.GetHashCode()
            If kindCase_ = KindOneofCase.StructValue Then hash = hash Xor StructValue.GetHashCode()
            If kindCase_ = KindOneofCase.ListValue Then hash = hash Xor ListValue.GetHashCode()
            hash = hash Xor kindCase_
            Return hash
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function ToString() As String
            Return JsonFormatter.ToDiagnosticString(Me)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub WriteTo(output As CodedOutputStream) Implements IMessage.WriteTo
            If kindCase_ = KindOneofCase.NullValue Then
                output.WriteRawTag(8)
                output.WriteEnum(CInt(NullValue))
            End If

            If kindCase_ = KindOneofCase.NumberValue Then
                output.WriteRawTag(17)
                output.WriteDouble(NumberValue)
            End If

            If kindCase_ = KindOneofCase.StringValue Then
                output.WriteRawTag(26)
                output.WriteString(StringValue)
            End If

            If kindCase_ = KindOneofCase.BoolValue Then
                output.WriteRawTag(32)
                output.WriteBool(BoolValue)
            End If

            If kindCase_ = KindOneofCase.StructValue Then
                output.WriteRawTag(42)
                output.WriteMessage(StructValue)
            End If

            If kindCase_ = KindOneofCase.ListValue Then
                output.WriteRawTag(50)
                output.WriteMessage(ListValue)
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Function CalculateSize() As Integer Implements IMessage.CalculateSize
            Dim size = 0

            If kindCase_ = KindOneofCase.NullValue Then
                size += 1 + CodedOutputStream.ComputeEnumSize(CInt(NullValue))
            End If

            If kindCase_ = KindOneofCase.NumberValue Then
                size += 1 + 8
            End If

            If kindCase_ = KindOneofCase.StringValue Then
                size += 1 + CodedOutputStream.ComputeStringSize(StringValue)
            End If

            If kindCase_ = KindOneofCase.BoolValue Then
                size += 1 + 1
            End If

            If kindCase_ = KindOneofCase.StructValue Then
                size += 1 + CodedOutputStream.ComputeMessageSize(StructValue)
            End If

            If kindCase_ = KindOneofCase.ListValue Then
                size += 1 + CodedOutputStream.ComputeMessageSize(ListValue)
            End If

            Return size
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub MergeFrom(other As Value) Implements IMessageType(Of Value).MergeFrom
            If other Is Nothing Then
                Return
            End If

            Select Case other.KindCase
                Case KindOneofCase.NullValue
                    NullValue = other.NullValue
                Case KindOneofCase.NumberValue
                    NumberValue = other.NumberValue
                Case KindOneofCase.StringValue
                    StringValue = other.StringValue
                Case KindOneofCase.BoolValue
                    BoolValue = other.BoolValue
                Case KindOneofCase.StructValue
                    StructValue = other.StructValue
                Case KindOneofCase.ListValue
                    ListValue = other.ListValue
            End Select
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub MergeFrom(input As CodedInputStream) Implements IMessage.MergeFrom
            Dim tag As UInteger

            While (CSharpImpl.__Assign(tag, input.ReadTag())) <> 0

                Select Case tag
                    Case 8
                        kind_ = input.ReadEnum()
                        kindCase_ = KindOneofCase.NullValue
                        Exit Select
                    Case 17
                        NumberValue = input.ReadDouble()
                        Exit Select
                    Case 26
                        StringValue = input.ReadString()
                        Exit Select
                    Case 32
                        BoolValue = input.ReadBool()
                        Exit Select
                    Case 42
                        Dim subBuilder As Global.Google.Protobuf.WellKnownTypes.Struct = New Global.Google.Protobuf.WellKnownTypes.Struct()

                        If kindCase_ = KindOneofCase.StructValue Then
                            subBuilder.MergeFrom(StructValue)
                        End If

                        input.ReadMessage(subBuilder)
                        StructValue = subBuilder
                        Exit Select
                    Case 50
                        Dim subBuilder As Global.Google.Protobuf.WellKnownTypes.ListValue = New Global.Google.Protobuf.WellKnownTypes.ListValue()

                        If kindCase_ = KindOneofCase.ListValue Then
                            subBuilder.MergeFrom(ListValue)
                        End If

                        input.ReadMessage(subBuilder)
                        ListValue = subBuilder
                        Exit Select
                    Case Else
                        input.SkipLastField()
                End Select
            End While
        End Sub

        Private Class CSharpImpl
            <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
            Shared Function __Assign(Of T)(ByRef target As T, value As T) As T
                target = value
                Return value
            End Function
        End Class
    End Class

    ''' <summary>
    '''  `ListValue` is a wrapper around a repeated field of values.
    '''
    '''  The JSON representation for `ListValue` is JSON array.
    ''' </summary>
    Public NotInheritable Partial Class ListValue
        Implements IMessageType(Of ListValue)

        Private Shared ReadOnly _parser As MessageParserType(Of ListValue) = New MessageParserType(Of ListValue)(Function() New ListValue())

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Shared ReadOnly Property Parser As MessageParserType(Of ListValue)
            Get
                Return _parser
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Shared ReadOnly Property DescriptorProp As pbr.MessageDescriptor
            Get
                Return Global.Google.Protobuf.WellKnownTypes.StructReflection.Descriptor.MessageTypes(2)
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Private ReadOnly Property Descriptor As pbr.MessageDescriptor Implements IMessage.Descriptor
            Get
                Return DescriptorProp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub New()
            OnConstruction()
        End Sub

        Partial Private Sub OnConstruction()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub New(other As ListValue)
            Me.New()
            values_ = other.values_.Clone()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Function Clone() As ListValue Implements IDeepCloneable(Of ListValue).Clone
            Return New ListValue(Me)
        End Function

        ''' <summary>Field number for the "values" field.</summary>
        Public Const ValuesFieldNumber As Integer = 1
        Private Shared ReadOnly _repeated_values_codec As FieldCodecType(Of Global.Google.Protobuf.WellKnownTypes.Value) = FieldCodec.ForMessage(10, Global.Google.Protobuf.WellKnownTypes.Value.Parser)
        Friend values_ As pbc.RepeatedField(Of Global.Google.Protobuf.WellKnownTypes.Value) = New pbc.RepeatedField(Of Global.Google.Protobuf.WellKnownTypes.Value)()
        ''' <summary>
        '''  Repeated field of dynamically typed values.
        ''' </summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public ReadOnly Property Values As pbc.RepeatedField(Of Global.Google.Protobuf.WellKnownTypes.Value)
            Get
                Return values_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function Equals(other As Object) As Boolean
            Return Equals(TryCast(other, ListValue))
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overloads Function Equals(other As ListValue) As Boolean Implements IEquatable(Of ListValue).Equals
            If ReferenceEquals(other, Nothing) Then
                Return False
            End If

            If ReferenceEquals(other, Me) Then
                Return True
            End If

            If Not values_.Equals(other.values_) Then Return False
            Return True
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function GetHashCode() As Integer
            Dim hash = 1
            hash = hash Xor values_.GetHashCode()
            Return hash
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Overrides Function ToString() As String
            Return JsonFormatter.ToDiagnosticString(Me)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub WriteTo(output As CodedOutputStream) Implements IMessage.WriteTo
            values_.WriteTo(output, _repeated_values_codec)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Function CalculateSize() As Integer Implements IMessage.CalculateSize
            Dim size = 0
            size += values_.CalculateSize(_repeated_values_codec)
            Return size
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub MergeFrom(other As ListValue) Implements IMessageType(Of ListValue).MergeFrom
            If other Is Nothing Then
                Return
            End If

            values_.Add(other.values_)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute>
        Public Sub MergeFrom(input As CodedInputStream) Implements IMessage.MergeFrom
            Dim tag As UInteger

            While (CSharpImpl.__Assign(tag, input.ReadTag())) <> 0

                Select Case tag
                    Case 10
                        values_.AddEntriesFrom(input, _repeated_values_codec)
                        Exit Select
                    Case Else
                        input.SkipLastField()
                End Select
            End While
        End Sub

        Private Class CSharpImpl
            <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
            Shared Function __Assign(Of T)(ByRef target As T, value As T) As T
                target = value
                Return value
            End Function
        End Class
    End Class

#End Region

End Namespace
#End Region
